%% -*- erlang -*-
{application, msync,
 [{description, "msync"},
  {vsn, {cmd, "env bash get_git_ver_string.sh"}},
  {modules, []},
  {registered, [
                msync_c2s,
                msync_c2s_sup
               ]},
  {mod, {msync_app, []}},
  {env, [ {port, 6717},
          {enable_media_request_transfer, false},
          {session_db_type, mnesia},
          {session_counter, true},
          {enable_session_db_hotswap, true},
          {max_num_of_sessions, 10},
          {enable_multi_devices, false},
          {sock_opts, [{backlog, 128},
                       {nodelay, true},
                       {recbuf, 4096},
                       {other_options, [{keepalive, true},
                                        {sndbuf,4096},
                                        {buffer, 1460},
                                        {send_timeout, 15000}]}
                      ]},
          {ejabberd_nodes, ['ejabberd@localhost']},
          {user, [{pool_size, 2},
                  {servers, <<"localhost:9147,localhost:9147">>}]},
          {user_auth_module, msync_user_with_poolboy},
          {user_auth_timeout, 500},
          {pid_path, "/var/log/msync/msync.pid"},
          {web_port, 8080},
          {media_server_port, 6666},
          {shaper, [
                    {rest,1000},
                    {fast,50000},
                    {normal,1000}
                   ]},
          {redis, [
                   {host, "127.0.0.1"},
                   {port, 6379},
                   {db, 0},
                   {pool_size, 4}
                  ]},
          {overload, 500},
          {realtime_limit, 60000},
          {store_nodes,
           [{all,['ejabberd@ssy-app']},
            {muc,['ejabberd@ssy-app']}]},
          {turnServers,
           [{<<"easemob.com">>, ["121.41.105.183:3478"]}]},
          {conference_expiration_ms, 10000},
          {enable_fix_unread, true},
          %% secret performance tuning weapon
          {worker_spawn_options,
           [
            {fullsweep_after, 20},
            %% 1words=8bytes, 1M for eternal process
            {min_heap_size,131072}
           ]},
          %% health check
          {health_server, [
                           {host, "localhost"},
                           {port, "8080"},
                           {path, "/cgi-bin/health"}
                          ]},
          {httpc_timeout, 10000},
          {http_proxy, {"localhost", 1888}},
          {health_monitor_period, 60000},
          {cluster, ebs},
          {is_msync, false},
          {process_queue_warn_len, 200},
          {odbc_ping_threshold, 100000},
          {redis_ping_threshold, 100000},
          {session_ping_threshold, 100000},
          {conn_num_limit, 100000},
          {worker_num_limit, 100},
          {enable_message_limit_queue, true},
          {message_queue_features, [message_queue_readmsg]},
          {message_queue_readmsg, [kafka_message_queue_large_chatroom_normal,
                                   kafka_message_queue_large_chatroom_low,
                                   kafka_message_queue_large_group_normal
                                  ]},
          {message_limit_queue,
           [{queue_num, 10},
            {queue_type, redis},
            {kafka_key, kafka_message_limit_queue},
            {redis_key, message_limit_queue},
            {redis_topic_prefix, <<"msync:msg:queue:">>}]},
          {mod_message_limit,
           [{speed,5000},
            {read, true},
            {sleep_time, 1000},
            {rate_list,[{0,0},{2000,0},{2001,80}]},
            {member_num_to_down_speed,[{0,1000},{1000,30},{3000,10}]},
            {statistics_expire_time, 1000},
            {refresh_interval, 60000}]},
          {all_checks, [
                        health_check_conn_num,
                        health_check_kafka,
                        health_check_lager,
                        health_check_odbc,
                        health_check_process_queue,
                        health_check_redis,
                        health_check_session,
                        health_check_worker_num
                       ]}
        ]},
  {applications, [kernel, stdlib, sasl, crypto, p1_stringprep, p1_xml]}]}.
